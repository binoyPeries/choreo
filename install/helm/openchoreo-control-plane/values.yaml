# Global values shared across all components
global:
  # Common labels to add to all resources
  commonLabels: {}
  # Default OpenChoreo resources created during installation
  defaultResources:
    enabled: true
    organization:
      displayName: Default Organization
      description: Getting started with your first organization
    environments:
      - name: development
        displayName: Development
        description: Development environment for testing
        dnsPrefix: dev
        isCritical: false
      - name: staging
        displayName: Staging
        description: Staging environment for pre-production testing
        dnsPrefix: staging
        isCritical: false
      - name: production
        displayName: Production
        description: Production environment
        dnsPrefix: prod
        isCritical: true
    deploymentPipeline:
      displayName: Default Pipeline
      description: Standard deployment pipeline with dev, staging, and prod environments
      promotionOrder:
        - sourceEnvironmentRef: development
          targetEnvironmentRefs:
            - name: staging
              requiresApproval: false
        - sourceEnvironmentRef: staging
          targetEnvironmentRefs:
            - name: production
              requiresApproval: false
    project:
      displayName: Default Project
      description: Your first project to get started
controllerManager:
  name: controller-manager
  manager:
    args:
      - --metrics-bind-address=:8443
      - --leader-elect
      - --health-probe-bind-address=:8081
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
    env:
      enableWebhooks: "false"
    image:
      repository: ghcr.io/openchoreo/controller
      tag: latest-dev
    imagePullPolicy: Always
    resources:
      limits:
        cpu: 500m
        memory: 128Mi
      requests:
        cpu: 10m
        memory: 64Mi
  podSecurityContext:
    runAsNonRoot: true
  replicas: 1
  serviceAccount:
    annotations: {}
kubernetesClusterDomain: cluster.local
metricsService:
  ports:
    - name: https
      port: 8443
      protocol: TCP
      targetPort: 8443
  type: ClusterIP
webhookService:
  ports:
    - port: 443
      protocol: TCP
      targetPort: 9443
  type: ClusterIP
waitJob:
  image: bitnamilegacy/kubectl:1.33.4
metricsServer:
  enabled: false
  kubeletInsecureTlsEnabled: true
openchoreoApi:
  name: api-server
  enabled: true
  image: "ghcr.io/openchoreo/openchoreo-api"
  imagePullPolicy: Always
  tag: "" # If no value is set, use Chart.AppVersion
  replicas: 1
  resources:
    requests:
      cpu: "100m"
      memory: "128Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"
# Dependency configurations

# Cert-Manager configuration
cert-manager:
  enabled: true
  fullnameOverride: cert-manager
  nameOverride: cert-manager
  crds:
    enabled: true
  resources:
    requests:
      cpu: 10m
      memory: 32Mi
    limits:
      cpu: 50m
      memory: 64Mi
  cainjector:
    resources:
      requests:
        cpu: 10m
        memory: 32Mi
      limits:
        cpu: 50m
        memory: 64Mi
  webhook:
    resources:
      requests:
        cpu: 10m
        memory: 32Mi
      limits:
        cpu: 50m
        memory: 64Mi

# Envoy Proxy configuration
envoyProxy:
  name: envoy-proxy
  replicas: 1
  port: 8000

  image:
    repository: envoyproxy/envoy
    tag: v1.29-latest
    pullPolicy: IfNotPresent

  imagePullSecrets: []

  # Resource limits
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi

  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 101
    capabilities:
      drop:
        - ALL

  # Node selector, affinity, and tolerations
  nodeSelector: {}
  affinity: {}
  tolerations: []

  # Extra volumes and volume mounts for secrets
  extraVolumes: []
  # Example for OIDC client secret:
  # - name: oidc-client-secret
  #   secret:
  #     secretName: oidc-client-secret

  extraVolumeMounts: []
  # Example for OIDC client secret:
  # - name: oidc-client-secret
  #   mountPath: /etc/envoy/secrets
  #   readOnly: true

  # Backend clusters
  clusters:
    - name: openchoreo-api-cluster
      address: api-server
      port: 8080
      connectTimeout: 5s
      type: STRICT_DNS
      lbPolicy: ROUND_ROBIN

  # Route configuration with per-route JWT validation
  routes:
    # Secured API route with JWT validation
    - path: /api/v1
      cluster: openchoreo-api-cluster
      jwt:
        enabled: true  # Require JWT for this route

    # Public health check (no JWT required)
    - path: /health
      cluster: openchoreo-api-cluster
      jwt:
        enabled: false

    # Default route
    - path: /
      cluster: openchoreo-api-cluster
      jwt:
        enabled: true

  # JWT provider configuration
  jwt:
    provider:
      name: jwt_provider
      issuer: https://accounts.google.com  # Your OIDC issuer URL
      audiences:
        - your-client-id  # Expected audience in JWT
      jwksUri: https://www.googleapis.com/oauth2/v3/certs  # JWKS endpoint URL
      jwksCluster: jwks_cluster
      jwksHost: www.googleapis.com
      jwksPort: 443
      timeout: 5s
      cacheDuration: 300s  # Cache JWKS keys for 5 minutes
      # Optional: Forward JWT claims as HTTP headers to backend
      claimToHeaders:
        - headerName: X-User-ID
          claimName: sub
        - headerName: X-User-Email
          claimName: email
